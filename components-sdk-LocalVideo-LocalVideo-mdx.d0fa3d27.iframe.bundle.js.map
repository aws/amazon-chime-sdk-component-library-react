{"version":3,"file":"components-sdk-LocalVideo-LocalVideo-mdx.d0fa3d27.iframe.bundle.js","mappings":";AAkBA;AAGA;;;;ACNA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;AAOA;;;;;;AAMA;AACA;;;;;AAKA;AACA","sources":["webpack://amazon-chime-sdk-component-library-react/./src/components/sdk/LocalVideo/index.tsx","webpack://amazon-chime-sdk-component-library-react/./src/components/ui/VideoTile/Styled.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\n\nimport { useApplyVideoObjectFit } from '../../../hooks/useApplyVideoObjectFit';\nimport { useAudioVideo } from '../../../providers/AudioVideoProvider';\nimport { useLocalVideo } from '../../../providers/LocalVideoProvider';\nimport VideoTile from '../../ui/VideoTile';\nimport { BaseSdkProps } from '../Base';\n\ninterface Props extends BaseSdkProps {\n  id?: string;\n  nameplate?: string;\n}\n\nconst StyledLocalVideo = styled<any>(VideoTile)`\n  ${(props) => (!props.active ? 'display: none' : '')};\n`;\n\nexport const LocalVideo: React.FC<React.PropsWithChildren<Props>> = ({\n  nameplate,\n  ...rest\n}) => {\n  const { tileId, isVideoEnabled } = useLocalVideo();\n  const audioVideo = useAudioVideo();\n  const videoEl = useRef<HTMLVideoElement>(null);\n  useApplyVideoObjectFit(videoEl);\n\n  useEffect(() => {\n    if (!audioVideo || !tileId || !videoEl.current || !isVideoEnabled) {\n      return;\n    }\n\n    audioVideo.bindVideoElement(tileId, videoEl.current);\n\n    return () => {\n      const tile = audioVideo.getVideoTile(tileId);\n      if (tile) {\n        audioVideo.unbindVideoElement(tileId);\n      }\n    };\n  }, [audioVideo, tileId, isVideoEnabled]);\n\n  return (\n    <StyledLocalVideo\n      active={isVideoEnabled}\n      nameplate={nameplate}\n      ref={videoEl}\n      {...rest}\n    />\n  );\n};\n\nexport default LocalVideo;\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport styled from 'styled-components';\n\nimport { defaultStyledConfig, ellipsis } from '../../../utils/style';\nimport { baseSpacing, baseStyles } from '../Base';\nimport { VideoTileProps } from './';\n\nexport const StyledVideoTile = styled.div.withConfig(\n  defaultStyledConfig\n)<VideoTileProps>`\n  height: 100%;\n  width: 100%;\n  position: relative;\n  background: ${(props) => props.theme.colors.greys.grey100};\n\n  video {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    width: 100%;\n    height: 100%;\n    object-fit: ${(props) => props.objectFit || 'cover'};\n  }\n\n  .ch-icon {\n    width: 1.5rem;\n    height: 1.5rem;\n    display: inline-block;\n    background-color: papayawhip; /* TODO: figure out what this is supposed to be */\n    margin-right: 0.5rem;\n    flex: 0 0 1.5rem;\n  }\n\n  .ch-nameplate {\n    backdrop-filter: blur(20px);\n    background-color: rgba(46, 47, 52, 0.85);\n    border-radius: 0.25rem;\n    bottom: 0.5rem;\n    color: ${(props) => props.theme.colors.greys.white};\n    left: 0.5rem;\n    max-width: calc(100% - 2rem);\n    padding: 0.5rem;\n    position: absolute;\n\n    div {\n      ${ellipsis};\n      display: flex;\n      align-items: center;\n    }\n\n    .ch-text {\n      font-size: ${(props) => props.theme.fontSizes.text.fontSize};\n      ${ellipsis};\n      margin: 0;\n    }\n  }\n\n  ${baseSpacing}\n  ${baseStyles}\n`;\n"],"names":[],"sourceRoot":""}