{"version":3,"file":"components-sdk-PreviewVideo-PreviewVideo-mdx.1b0bb7da.iframe.bundle.js","mappings":";;;;;;;AAuBA;;;;ACRA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;AAOA;;;;;;AAMA;AACA;;;;;AAKA;AACA","sources":["webpack://amazon-chime-sdk-component-library-react/./src/components/sdk/PreviewVideo/index.tsx","webpack://amazon-chime-sdk-component-library-react/./src/components/ui/VideoTile/Styled.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\n\nimport { useAudioVideo } from '../../../providers/AudioVideoProvider';\nimport { useVideoInputs } from '../../../providers/DevicesProvider';\nimport { useLocalVideo } from '../../../providers/LocalVideoProvider';\nimport { useLogger } from '../../../providers/LoggerProvider';\nimport { useMeetingManager } from '../../../providers/MeetingProvider';\nimport VideoTile from '../../ui/VideoTile';\nimport { BaseSdkProps } from '../Base';\n\nconst StyledPreview = styled(VideoTile)`\n  height: auto;\n  background: unset;\n\n  video {\n    position: static;\n  }\n`;\n\nexport const PreviewVideo: React.FC<React.PropsWithChildren<BaseSdkProps>> = (\n  props\n) => {\n  const logger = useLogger();\n  const audioVideo = useAudioVideo();\n  const { selectedDevice } = useVideoInputs();\n  const videoEl = useRef<HTMLVideoElement>(null);\n  const meetingManager = useMeetingManager();\n  const { setIsVideoEnabled } = useLocalVideo();\n\n  useEffect(() => {\n    const videoElement = videoEl.current;\n    return () => {\n      if (videoElement) {\n        audioVideo?.stopVideoPreviewForVideoInput(videoElement);\n        audioVideo?.stopVideoInput();\n        setIsVideoEnabled(false);\n      }\n    };\n  }, [audioVideo]);\n\n  useEffect(() => {\n    async function startPreview(): Promise<void> {\n      if (!audioVideo || !selectedDevice || !videoEl.current) {\n        return;\n      }\n\n      try {\n        await meetingManager.startVideoInputDevice(selectedDevice);\n        audioVideo.startVideoPreviewForVideoInput(videoEl.current);\n        setIsVideoEnabled(true);\n      } catch (error) {\n        logger.error('Failed to start video preview');\n      }\n    }\n\n    startPreview();\n  }, [audioVideo, selectedDevice]);\n\n  return <StyledPreview {...props} ref={videoEl} />;\n};\n\nexport default PreviewVideo;\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport styled from 'styled-components';\n\nimport { defaultStyledConfig, ellipsis } from '../../../utils/style';\nimport { baseSpacing, baseStyles } from '../Base';\nimport { VideoTileProps } from './';\n\nexport const StyledVideoTile = styled.div.withConfig(\n  defaultStyledConfig\n)<VideoTileProps>`\n  height: 100%;\n  width: 100%;\n  position: relative;\n  background: ${(props) => props.theme.colors.greys.grey100};\n\n  video {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    width: 100%;\n    height: 100%;\n    object-fit: ${(props) => props.objectFit || 'cover'};\n  }\n\n  .ch-icon {\n    width: 1.5rem;\n    height: 1.5rem;\n    display: inline-block;\n    background-color: papayawhip; /* TODO: figure out what this is supposed to be */\n    margin-right: 0.5rem;\n    flex: 0 0 1.5rem;\n  }\n\n  .ch-nameplate {\n    backdrop-filter: blur(20px);\n    background-color: rgba(46, 47, 52, 0.85);\n    border-radius: 0.25rem;\n    bottom: 0.5rem;\n    color: ${(props) => props.theme.colors.greys.white};\n    left: 0.5rem;\n    max-width: calc(100% - 2rem);\n    padding: 0.5rem;\n    position: absolute;\n\n    div {\n      ${ellipsis};\n      display: flex;\n      align-items: center;\n    }\n\n    .ch-text {\n      font-size: ${(props) => props.theme.fontSizes.text.fontSize};\n      ${ellipsis};\n      margin: 0;\n    }\n  }\n\n  ${baseSpacing}\n  ${baseStyles}\n`;\n"],"names":[],"sourceRoot":""}