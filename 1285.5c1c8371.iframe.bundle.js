"use strict";(self.webpackChunkamazon_chime_sdk_component_library_react=self.webpackChunkamazon_chime_sdk_component_library_react||[]).push([[1285],{"./src/providers/AudioVideoProvider/index.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{n3:()=>useAudioVideo,tk:()=>AudioVideoProvider});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_providers_MeetingProvider__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/providers/MeetingProvider/index.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/react/jsx-runtime.js");const AudioVideoContext=(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null),AudioVideoProvider=({children})=>{const meetingManager=(0,_providers_MeetingProvider__WEBPACK_IMPORTED_MODULE_1__.GY)(),[audioVideo,setAudioVideo]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);return(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{function audioVideoUpdateCb(av){setAudioVideo(av)}return meetingManager.subscribeToAudioVideo(audioVideoUpdateCb),()=>meetingManager.unsubscribeFromAudioVideo(audioVideoUpdateCb)}),[]),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(AudioVideoContext.Provider,{value:audioVideo,children})};AudioVideoProvider.displayName="AudioVideoProvider";const useAudioVideo=()=>(0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(AudioVideoContext);try{AudioVideoProvider.displayName="AudioVideoProvider",AudioVideoProvider.__docgenInfo={description:"",displayName:"AudioVideoProvider",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/providers/AudioVideoProvider/index.tsx#AudioVideoProvider"]={docgenInfo:AudioVideoProvider.__docgenInfo,name:"AudioVideoProvider",path:"src/providers/AudioVideoProvider/index.tsx#AudioVideoProvider"})}catch(__react_docgen_typescript_loader_error){}},"./src/providers/ContentShareProvider/index.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{mM:()=>ContentShareProvider,KP:()=>useContentShareControls,TD:()=>useContentShareState});var build=__webpack_require__("./node_modules/amazon-chime-sdk-js/build/index.js"),react=__webpack_require__("./node_modules/react/index.js"),AudioVideoProvider=__webpack_require__("./src/providers/AudioVideoProvider/index.tsx");let ContentActionType=function(ContentActionType){return ContentActionType[ContentActionType.STARTING=0]="STARTING",ContentActionType[ContentActionType.DID_STOP=1]="DID_STOP",ContentActionType[ContentActionType.UPDATE=2]="UPDATE",ContentActionType[ContentActionType.TOGGLE_PAUSE=3]="TOGGLE_PAUSE",ContentActionType[ContentActionType.REMOVE=4]="REMOVE",ContentActionType[ContentActionType.DENIED=5]="DENIED",ContentActionType[ContentActionType.RESET=6]="RESET",ContentActionType}({});const initialState={tileId:null,paused:!1,isLocalUserSharing:!1,isLocalShareLoading:!1,sharingAttendeeId:null};function reducer(state,{type,payload}){switch(type){case ContentActionType.STARTING:return{...state,isLocalShareLoading:!0};case ContentActionType.UPDATE:{const{isLocalUser,tileState}=payload,{tileId}=state;return tileId===tileState.tileId||tileId&&tileId>tileState.tileId?state:{paused:!1,tileId:tileState.tileId,isLocalShareLoading:!1,isLocalUserSharing:isLocalUser,sharingAttendeeId:tileState.boundAttendeeId}}case ContentActionType.REMOVE:{const{tileId}=state;return tileId!==payload?state:initialState}case ContentActionType.DID_STOP:{const{isLocalUserSharing}=state;return isLocalUserSharing?initialState:{...state,isLocalShareLoading:!1,isLocalUserSharing:!1,paused:!1}}case ContentActionType.TOGGLE_PAUSE:return state.isLocalUserSharing?{...state,paused:!state.paused}:state;case ContentActionType.DENIED:return state.isLocalShareLoading?{...state,isLocalShareLoading:!1}:state;case ContentActionType.RESET:return initialState;default:throw new Error("Incorrect type in VideoProvider")}}var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const ContentShareContext=(0,react.createContext)(null),ContentShareControlContext=(0,react.createContext)(null),ContentShareProvider=({children})=>{const audioVideo=(0,AudioVideoProvider.n3)(),[state,dispatch]=(0,react.useReducer)(reducer,initialState),{paused,isLocalUserSharing,isLocalShareLoading}=state,localUserTileIdRef=(0,react.useRef)(null);(0,react.useEffect)((()=>{if(!audioVideo)return;const videoObserver={videoTileDidUpdate:tileState=>{if(!tileState.boundAttendeeId||!tileState.isContent||!tileState.tileId)return;const{boundAttendeeId}=tileState,isLocalUser=new build.DefaultModality(boundAttendeeId).base()===audioVideo.audioVideoController.realtimeController.state.localAttendeeId;!isLocalUser&&localUserTileIdRef.current&&localUserTileIdRef.current<tileState.tileId&&(audioVideo.stopContentShare(),localUserTileIdRef.current=null),isLocalUser&&(localUserTileIdRef.current=tileState.tileId),dispatch({type:ContentActionType.UPDATE,payload:{tileState,isLocalUser}})},videoTileWasRemoved:tileId=>{tileId===localUserTileIdRef.current&&(localUserTileIdRef.current=null),dispatch({type:ContentActionType.REMOVE,payload:tileId})}},contentShareObserver={contentShareDidStop:()=>{dispatch({type:ContentActionType.DID_STOP})}};return audioVideo.addObserver(videoObserver),audioVideo.addContentShareObserver(contentShareObserver),()=>{audioVideo.removeObserver(videoObserver),audioVideo.removeContentShareObserver(contentShareObserver),dispatch({type:ContentActionType.RESET})}}),[audioVideo]),(0,react.useEffect)((()=>{if(!audioVideo)return;const cb=event=>{"NotAllowedError"===event.reason.name&&dispatch({type:ContentActionType.DENIED})};return window.addEventListener("unhandledrejection",cb),()=>window.removeEventListener("unhandledrejection",cb)}),[isLocalShareLoading]);const toggleContentShare=(0,react.useCallback)((async source=>{audioVideo&&(isLocalUserSharing||isLocalShareLoading?audioVideo.stopContentShare():(source&&"string"==typeof source?await audioVideo.startContentShareFromScreenCapture(source):source&&source instanceof MediaStream?await audioVideo.startContentShare(source):await audioVideo.startContentShareFromScreenCapture(),dispatch({type:ContentActionType.STARTING})))}),[audioVideo,isLocalUserSharing,isLocalShareLoading]),togglePauseContentShare=(0,react.useCallback)((()=>{audioVideo&&isLocalUserSharing&&(paused?audioVideo.unpauseContentShare():audioVideo.pauseContentShare(),dispatch({type:ContentActionType.TOGGLE_PAUSE}))}),[audioVideo,paused,isLocalUserSharing]),controlsValue=(0,react.useMemo)((()=>({paused,isLocalUserSharing,isLocalShareLoading,toggleContentShare,togglePauseContentShare})),[paused,toggleContentShare,togglePauseContentShare,isLocalUserSharing,isLocalShareLoading]);return(0,jsx_runtime.jsx)(ContentShareContext.Provider,{value:state,children:(0,jsx_runtime.jsx)(ContentShareControlContext.Provider,{value:controlsValue,children})})};ContentShareProvider.displayName="ContentShareProvider";const useContentShareState=()=>{const contentShareState=(0,react.useContext)(ContentShareContext);if(!contentShareState)throw new Error("useContentShareState must be used within a ContentShareProvider");return contentShareState},useContentShareControls=()=>{const context=(0,react.useContext)(ContentShareControlContext);if(!context)throw new Error("useContentShareControlContext must be used within ContentShareControlProvider");return context};try{ContentShareProvider.displayName="ContentShareProvider",ContentShareProvider.__docgenInfo={description:"",displayName:"ContentShareProvider",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/providers/ContentShareProvider/index.tsx#ContentShareProvider"]={docgenInfo:ContentShareProvider.__docgenInfo,name:"ContentShareProvider",path:"src/providers/ContentShareProvider/index.tsx#ContentShareProvider"})}catch(__react_docgen_typescript_loader_error){}},"./src/providers/DevicesProvider/AudioInputProvider.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{x:()=>useAudioInputs,y:()=>AudioInputProvider});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_types__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/types/index.ts"),_AudioVideoProvider__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/providers/AudioVideoProvider/index.tsx"),_LoggerProvider__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/providers/LoggerProvider/index.tsx"),_MeetingProvider__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/providers/MeetingProvider/index.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/react/jsx-runtime.js");const Context=(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null),AudioInputProvider=({children,onDeviceReplacement})=>{const logger=(0,_LoggerProvider__WEBPACK_IMPORTED_MODULE_3__.Ul)(),meetingManager=(0,_MeetingProvider__WEBPACK_IMPORTED_MODULE_4__.GY)(),audioVideo=(0,_AudioVideoProvider__WEBPACK_IMPORTED_MODULE_2__.n3)(),[audioInputs,setAudioInputs]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]),[selectedAudioInputDevice,setSelectedAudioInputDevice]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(meetingManager.selectedAudioInputDevice),selectedInputRef=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(selectedAudioInputDevice);selectedInputRef.current=selectedAudioInputDevice;(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>(meetingManager.subscribeToSelectedAudioInputDevice(setSelectedAudioInputDevice),()=>{meetingManager.unsubscribeFromSelectedAudioInputDevice(setSelectedAudioInputDevice)})),[]),(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{let isMounted=!0;const observer={audioInputsChanged:async newAudioInputs=>{if(logger.info("AudioInputProvider - audio inputs updated"),meetingManager.getDeviceLabels()!==_types__WEBPACK_IMPORTED_MODULE_1__.ii.Audio&&meetingManager.getDeviceLabels()!==_types__WEBPACK_IMPORTED_MODULE_1__.ii.AudioAndVideo)return void logger.info("Device labels do not allow audio, skipping audio input selection on audioInputsChanged");const hasSelectedDevice=newAudioInputs.some((device=>device.deviceId===selectedInputRef.current));let nextInput="default";selectedInputRef.current&&!hasSelectedDevice&&newAudioInputs.length?(logger.info("Previously selected audio input lost. Selecting a default device."),nextInput=newAudioInputs[0].deviceId):"default"===selectedInputRef.current&&logger.info('Audio devices updated and "default" device is selected. Reselecting input.');const nextDevice=await(async device=>onDeviceReplacement?onDeviceReplacement(device,meetingManager.selectedAudioInputDevice):device)(nextInput);try{await meetingManager.startAudioInputDevice(nextDevice)}catch(e){logger.error(`Failed to select audio input device on audioInputsChanged: ${e}`)}setAudioInputs(newAudioInputs)}};async function initAudioInput(){if(!audioVideo)return;const devices=await audioVideo.listAudioInputDevices();isMounted&&(setAudioInputs(devices),audioVideo.addDeviceChangeObserver(observer))}const callback=()=>{initAudioInput()};return meetingManager.subscribeToDeviceLabelTrigger(callback),initAudioInput(),()=>{isMounted=!1,audioVideo?.removeDeviceChangeObserver(observer),meetingManager.unsubscribeFromDeviceLabelTrigger(callback)}}),[audioVideo,onDeviceReplacement]);const contextValue=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((()=>({devices:audioInputs,selectedDevice:selectedAudioInputDevice})),[audioInputs,selectedAudioInputDevice]);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(Context.Provider,{value:contextValue,children})};AudioInputProvider.displayName="AudioInputProvider";const useAudioInputs=()=>{const context=(0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Context);if(!context)throw new Error("useAudioInputs must be used within AudioInputProvider");return context};try{AudioInputProvider.displayName="AudioInputProvider",AudioInputProvider.__docgenInfo={description:"",displayName:"AudioInputProvider",props:{onDeviceReplacement:{defaultValue:null,description:"",name:"onDeviceReplacement",required:!1,type:{name:"((nextDevice: string, currentDevice: AudioInputDevice | undefined) => Promise<AudioInputDevice>) | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/providers/DevicesProvider/AudioInputProvider.tsx#AudioInputProvider"]={docgenInfo:AudioInputProvider.__docgenInfo,name:"AudioInputProvider",path:"src/providers/DevicesProvider/AudioInputProvider.tsx#AudioInputProvider"})}catch(__react_docgen_typescript_loader_error){}},"./src/providers/DevicesProvider/index.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{vZ:()=>DevicesProvider,xt:()=>AudioInputProvider.x,gD:()=>useAudioOutputs,O5:()=>useVideoInputs});var react=__webpack_require__("./node_modules/react/index.js"),AudioInputProvider=__webpack_require__("./src/providers/DevicesProvider/AudioInputProvider.tsx"),AudioVideoProvider=__webpack_require__("./src/providers/AudioVideoProvider/index.tsx"),LoggerProvider=__webpack_require__("./src/providers/LoggerProvider/index.tsx"),MeetingProvider=__webpack_require__("./src/providers/MeetingProvider/index.tsx"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const AudioOutputContext=(0,react.createContext)(null),AudioOutputProvider=({children})=>{const logger=(0,LoggerProvider.Ul)(),audioVideo=(0,AudioVideoProvider.n3)(),[audioOutputs,setAudioOutputs]=(0,react.useState)([]),meetingManager=(0,MeetingProvider.GY)(),[selectedAudioOutputDevice,setSelectedAudioOutputDevice]=(0,react.useState)(meetingManager.selectedAudioOutputDevice);(0,react.useEffect)((()=>(meetingManager.subscribeToSelectedAudioOutputDevice(setSelectedAudioOutputDevice),()=>{meetingManager.unsubscribeFromSelectedAudioOutputDevice(setSelectedAudioOutputDevice)})),[]),(0,react.useEffect)((()=>{let isMounted=!0;const observer={audioOutputsChanged:newAudioOutputs=>{logger.info("AudioOutputProvider - audio outputs updated"),setAudioOutputs(newAudioOutputs)}};async function initAudioOutput(){if(!audioVideo)return;const devices=await audioVideo.listAudioOutputDevices();isMounted&&(setAudioOutputs(devices),audioVideo.addDeviceChangeObserver(observer))}const callback=()=>{initAudioOutput()};return meetingManager.subscribeToDeviceLabelTrigger(callback),initAudioOutput(),()=>{isMounted=!1,audioVideo?.removeDeviceChangeObserver(observer),meetingManager.unsubscribeFromDeviceLabelTrigger(callback)}}),[audioVideo]);const contextValue=(0,react.useMemo)((()=>({devices:audioOutputs,selectedDevice:selectedAudioOutputDevice})),[audioOutputs,selectedAudioOutputDevice]);return(0,jsx_runtime.jsx)(AudioOutputContext.Provider,{value:contextValue,children})};AudioOutputProvider.displayName="AudioOutputProvider";const useAudioOutputs=()=>{const context=(0,react.useContext)(AudioOutputContext);if(!context)throw new Error("useAudioOutputs must be used within AudioOutputProvider");return context};try{AudioOutputProvider.displayName="AudioOutputProvider",AudioOutputProvider.__docgenInfo={description:"",displayName:"AudioOutputProvider",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/providers/DevicesProvider/AudioOutputProvider.tsx#AudioOutputProvider"]={docgenInfo:AudioOutputProvider.__docgenInfo,name:"AudioOutputProvider",path:"src/providers/DevicesProvider/AudioOutputProvider.tsx#AudioOutputProvider"})}catch(__react_docgen_typescript_loader_error){}const Context=(0,react.createContext)(null),VideoInputProvider=({children})=>{const logger=(0,LoggerProvider.Ul)(),audioVideo=(0,AudioVideoProvider.n3)(),[videoInputs,setVideoInputs]=(0,react.useState)([]),meetingManager=(0,MeetingProvider.GY)(),[selectedVideoInputDevice,setSelectedVideoInputDevice]=(0,react.useState)(meetingManager.selectedVideoInputDevice);(0,react.useEffect)((()=>(meetingManager.subscribeToSelectedVideoInputDevice(setSelectedVideoInputDevice),()=>{meetingManager.unsubscribeFromSelectedVideoInputDevice(setSelectedVideoInputDevice)})),[]),(0,react.useEffect)((()=>{let isMounted=!0;const observer={videoInputsChanged:newVideoInputs=>{logger.info("VideoInputProvider - video inputs updated"),setVideoInputs(newVideoInputs)}};async function initVideoInput(){if(!audioVideo)return;const devices=await audioVideo.listVideoInputDevices();isMounted&&(setVideoInputs(devices),audioVideo.addDeviceChangeObserver(observer))}const callback=()=>{initVideoInput()};return meetingManager.subscribeToDeviceLabelTrigger(callback),initVideoInput(),()=>{isMounted=!1,audioVideo?.removeDeviceChangeObserver(observer),meetingManager.unsubscribeFromDeviceLabelTrigger(callback)}}),[audioVideo]);const contextValue=(0,react.useMemo)((()=>({devices:videoInputs,selectedDevice:selectedVideoInputDevice})),[videoInputs,selectedVideoInputDevice]);return(0,jsx_runtime.jsx)(Context.Provider,{value:contextValue,children})};VideoInputProvider.displayName="VideoInputProvider";const useVideoInputs=()=>{const context=(0,react.useContext)(Context);if(!context)throw new Error("useVideoInputs must be used within VideoInputProvider");return context};try{VideoInputProvider.displayName="VideoInputProvider",VideoInputProvider.__docgenInfo={description:"",displayName:"VideoInputProvider",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/providers/DevicesProvider/VideoInputProvider.tsx#VideoInputProvider"]={docgenInfo:VideoInputProvider.__docgenInfo,name:"VideoInputProvider",path:"src/providers/DevicesProvider/VideoInputProvider.tsx#VideoInputProvider"})}catch(__react_docgen_typescript_loader_error){}const DevicesProvider=({children,onDeviceReplacement})=>(0,jsx_runtime.jsx)(AudioInputProvider.y,{onDeviceReplacement,children:(0,jsx_runtime.jsx)(AudioOutputProvider,{children:(0,jsx_runtime.jsx)(VideoInputProvider,{children})})});DevicesProvider.displayName="DevicesProvider";try{DevicesProvider.displayName="DevicesProvider",DevicesProvider.__docgenInfo={description:"",displayName:"DevicesProvider",props:{onDeviceReplacement:{defaultValue:null,description:"",name:"onDeviceReplacement",required:!1,type:{name:"((nextDevice: string, currentDevice: AudioInputDevice) => Promise<AudioInputDevice>) | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/providers/DevicesProvider/index.tsx#DevicesProvider"]={docgenInfo:DevicesProvider.__docgenInfo,name:"DevicesProvider",path:"src/providers/DevicesProvider/index.tsx#DevicesProvider"})}catch(__react_docgen_typescript_loader_error){}},"./src/providers/FeaturedVideoTileProvider/index.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{L:()=>FeaturedVideoTileProvider,b:()=>useFeaturedTileState});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_MeetingProvider__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/providers/MeetingProvider/index.tsx"),_RemoteVideoTileProvider__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/providers/RemoteVideoTileProvider/index.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/react/jsx-runtime.js");const FeaturedTileContext=(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null),FeaturedVideoTileProvider=({children})=>{const meetingManager=(0,_MeetingProvider__WEBPACK_IMPORTED_MODULE_1__.GY)(),{attendeeIdToTileId}=(0,_RemoteVideoTileProvider__WEBPACK_IMPORTED_MODULE_2__.C)(),activeTileRef=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null),[activeTile,setActiveTile]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null),timeout=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null),pendingAttendee=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{const activeSpeakerCallback=activeAttendees=>{const activeId=activeAttendees[0];if(activeId===pendingAttendee.current)return;if(pendingAttendee.current=activeId,timeout.current&&clearTimeout(timeout.current),!activeId)return activeTileRef.current=null,void setActiveTile(null);const tileId=attendeeIdToTileId[activeId];tileId?tileId!==activeTileRef.current&&(activeTileRef.current?timeout.current=window.setTimeout((()=>{activeTileRef.current=tileId,setActiveTile(tileId)}),1500):(activeTileRef.current=tileId,setActiveTile(tileId))):activeTileRef.current&&(timeout.current=window.setTimeout((()=>{activeTileRef.current=null,setActiveTile(null)}),1500))};return meetingManager.subscribeToActiveSpeaker(activeSpeakerCallback),()=>meetingManager.unsubscribeFromActiveSpeaker(activeSpeakerCallback)}),[attendeeIdToTileId]);const value=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((()=>({tileId:activeTile})),[activeTile]);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(FeaturedTileContext.Provider,{value,children})};function useFeaturedTileState(){const state=(0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(FeaturedTileContext);if(!state)throw new Error("useFeaturedTileState must be used within an FeaturedVideoTileProvider");return state}FeaturedVideoTileProvider.displayName="FeaturedVideoTileProvider";try{FeaturedVideoTileProvider.displayName="FeaturedVideoTileProvider",FeaturedVideoTileProvider.__docgenInfo={description:"",displayName:"FeaturedVideoTileProvider",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/providers/FeaturedVideoTileProvider/index.tsx#FeaturedVideoTileProvider"]={docgenInfo:FeaturedVideoTileProvider.__docgenInfo,name:"FeaturedVideoTileProvider",path:"src/providers/FeaturedVideoTileProvider/index.tsx#FeaturedVideoTileProvider"})}catch(__react_docgen_typescript_loader_error){}},"./src/providers/LocalAudioOutputProvider/index.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Q:()=>LocalAudioOutputProvider,e:()=>useLocalAudioOutput});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_AudioVideoProvider__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/providers/AudioVideoProvider/index.tsx"),_LoggerProvider__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/providers/LoggerProvider/index.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/react/jsx-runtime.js");const Context=(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null),LocalAudioOutputProvider=({children})=>{const logger=(0,_LoggerProvider__WEBPACK_IMPORTED_MODULE_2__.Ul)(),audioVideo=(0,_AudioVideoProvider__WEBPACK_IMPORTED_MODULE_1__.n3)(),[isAudioOn,setIsAudioOn]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!0),audioRef=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{if(audioVideo)return audioRef.current&&(async element=>{try{await audioVideo.bindAudioElement(element)}catch(e){logger.error(`Failed to bind audio element. ${e}`)}})(audioRef.current),()=>{audioVideo.unbindAudioElement(),setIsAudioOn(!0)}}),[audioVideo]);const toggleAudio=(0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((()=>{audioRef.current&&(setIsAudioOn(!isAudioOn),isAudioOn?audioVideo?.unbindAudioElement():(async element=>{try{await(audioVideo?.bindAudioElement(element))}catch(e){logger.error(`Failed to bind audio element. ${e}`)}})(audioRef.current))}),[audioRef,audioVideo,isAudioOn]),value=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((()=>({isAudioOn,toggleAudio})),[isAudioOn,toggleAudio]);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(Context.Provider,{value,children:[children,(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("audio",{ref:audioRef,style:{display:"none"}})]})};LocalAudioOutputProvider.displayName="LocalAudioOutputProvider";const useLocalAudioOutput=()=>{const context=(0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Context);if(!context)throw new Error("useLocalAudioOutput must be used within LocalAudioOutputProvider");return context};try{LocalAudioOutputProvider.displayName="LocalAudioOutputProvider",LocalAudioOutputProvider.__docgenInfo={description:"",displayName:"LocalAudioOutputProvider",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/providers/LocalAudioOutputProvider/index.tsx#LocalAudioOutputProvider"]={docgenInfo:LocalAudioOutputProvider.__docgenInfo,name:"LocalAudioOutputProvider",path:"src/providers/LocalAudioOutputProvider/index.tsx#LocalAudioOutputProvider"})}catch(__react_docgen_typescript_loader_error){}},"./src/providers/LocalVideoProvider/index.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{o:()=>useLocalVideo,w:()=>LocalVideoProvider});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_AudioVideoProvider__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/providers/AudioVideoProvider/index.tsx"),_DevicesProvider__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/providers/DevicesProvider/index.tsx"),_LoggerProvider__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/providers/LoggerProvider/index.tsx"),_MeetingProvider__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/providers/MeetingProvider/index.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/react/jsx-runtime.js");const Context=(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null),LocalVideoProvider=({children})=>{const logger=(0,_LoggerProvider__WEBPACK_IMPORTED_MODULE_3__.Ul)(),meetingManager=(0,_MeetingProvider__WEBPACK_IMPORTED_MODULE_4__.GY)(),audioVideo=(0,_AudioVideoProvider__WEBPACK_IMPORTED_MODULE_1__.n3)(),{devices,selectedDevice}=(0,_DevicesProvider__WEBPACK_IMPORTED_MODULE_2__.O5)(),[isVideoEnabled,setIsVideoEnabled]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1),[hasReachedVideoLimit,setHasReachedVideoLimit]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1),[tileId,setTileId]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{if(!audioVideo)return;audioVideo.hasStartedLocalVideoTile()&&setIsVideoEnabled(!0);const observer={videoAvailabilityDidChange:availability=>{availability.canStartLocalVideo?setHasReachedVideoLimit(!1):setHasReachedVideoLimit(!0),logger.info(`video availability changed: canStartLocalVideo ${availability.canStartLocalVideo}`)}};return audioVideo.addObserver(observer),()=>{setIsVideoEnabled(!1),audioVideo.removeObserver(observer)}}),[audioVideo]),(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{hasReachedVideoLimit&&logger.warn("Reach the number of maximum active videos")}),[hasReachedVideoLimit]),(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{audioVideo?.hasStartedLocalVideoTile()||setIsVideoEnabled(!1)}),[devices]);const toggleVideo=(0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((async()=>{try{isVideoEnabled||!selectedDevice?(selectedDevice||logger.warn("There is no input video device chosen!"),await(audioVideo?.stopVideoInput()),setIsVideoEnabled(!1)):hasReachedVideoLimit?logger.error("Video limit is reached and can not turn on more videos!"):(await meetingManager.startVideoInputDevice(selectedDevice),audioVideo?.startLocalVideoTile(),setIsVideoEnabled(!0))}catch(error){logger.error("Failed to toggle video")}}),[audioVideo,isVideoEnabled,hasReachedVideoLimit,selectedDevice]);(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{if(!audioVideo)return;const observer={videoTileDidUpdate:tileState=>{tileState.localTile&&tileState.tileId&&tileId!==tileState.tileId&&setTileId(tileState.tileId)}};return audioVideo.addObserver(observer),()=>audioVideo.removeObserver(observer)}),[audioVideo,tileId]);const value=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((()=>({tileId,isVideoEnabled,setIsVideoEnabled,hasReachedVideoLimit,setHasReachedVideoLimit,toggleVideo})),[tileId,isVideoEnabled,setIsVideoEnabled,hasReachedVideoLimit,setHasReachedVideoLimit,toggleVideo]);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(Context.Provider,{value,children})};LocalVideoProvider.displayName="LocalVideoProvider";const useLocalVideo=()=>{const context=(0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Context);if(!context)throw new Error("useLocalVideo must be used within LocalVideoProvider");return context};try{LocalVideoProvider.displayName="LocalVideoProvider",LocalVideoProvider.__docgenInfo={description:"",displayName:"LocalVideoProvider",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/providers/LocalVideoProvider/index.tsx#LocalVideoProvider"]={docgenInfo:LocalVideoProvider.__docgenInfo,name:"LocalVideoProvider",path:"src/providers/LocalVideoProvider/index.tsx#LocalVideoProvider"})}catch(__react_docgen_typescript_loader_error){}},"./src/providers/LoggerProvider/index.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{IB:()=>LoggerProvider,Ul:()=>useLogger});var amazon_chime_sdk_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/amazon-chime-sdk-js/build/index.js"),react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/index.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/react/jsx-runtime.js");const consoleLogger=new amazon_chime_sdk_js__WEBPACK_IMPORTED_MODULE_0__.ConsoleLogger("ChimeSDKReactComponent",amazon_chime_sdk_js__WEBPACK_IMPORTED_MODULE_0__.LogLevel.INFO),LoggerContext=react__WEBPACK_IMPORTED_MODULE_1__.createContext(consoleLogger),LoggerProvider=({logger,children})=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(LoggerContext.Provider,{value:logger,children});LoggerProvider.displayName="LoggerProvider";const useLogger=()=>(0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(LoggerContext);try{LoggerProvider.displayName="LoggerProvider",LoggerProvider.__docgenInfo={description:"",displayName:"LoggerProvider",props:{logger:{defaultValue:null,description:"",name:"logger",required:!0,type:{name:"Logger"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/providers/LoggerProvider/index.tsx#LoggerProvider"]={docgenInfo:LoggerProvider.__docgenInfo,name:"LoggerProvider",path:"src/providers/LoggerProvider/index.tsx#LoggerProvider"})}catch(__react_docgen_typescript_loader_error){}},"./src/providers/MeetingEventProvider/index.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Fh:()=>MeetingEventProvider});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_MeetingProvider__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/providers/MeetingProvider/index.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/react/jsx-runtime.js");const MeetingEventProviderContext=(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(void 0),MeetingEventProvider=({children})=>{const[meetingEvent,setMeetingEvent]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(),meetingManager=(0,_MeetingProvider__WEBPACK_IMPORTED_MODULE_1__.GY)();return(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{function meetingEventUpdateCallback(name,attributes){setMeetingEvent({name,attributes})}return meetingManager.subscribeToEventDidReceive(meetingEventUpdateCallback),()=>{meetingManager.unsubscribeFromEventDidReceive(meetingEventUpdateCallback)}}),[]),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MeetingEventProviderContext.Provider,{value:meetingEvent,children})};MeetingEventProvider.displayName="MeetingEventProvider";try{MeetingEventProvider.displayName="MeetingEventProvider",MeetingEventProvider.__docgenInfo={description:"",displayName:"MeetingEventProvider",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/providers/MeetingEventProvider/index.tsx#MeetingEventProvider"]={docgenInfo:MeetingEventProvider.__docgenInfo,name:"MeetingEventProvider",path:"src/providers/MeetingEventProvider/index.tsx#MeetingEventProvider"})}catch(__react_docgen_typescript_loader_error){}},"./src/providers/MeetingProvider/MeetingManager.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var amazon_chime_sdk_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/amazon-chime-sdk-js/build/index.js"),_types__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/types/index.ts");function noOpDeviceLabelHook(){return Promise.resolve(new MediaStream)}const __WEBPACK_DEFAULT_EXPORT__=class MeetingManager{meetingSession=null;meetingStatus=_types__WEBPACK_IMPORTED_MODULE_1__.e0.Loading;meetingStatusObservers=[];audioVideo=null;audioVideoObservers={};meetingId=null;selectedAudioOutputDeviceObservers=[];selectedAudioInputDeviceObservers=[];selectedVideoInputDeviceObservers=[];audioInputDevices=null;audioOutputDevices=null;videoInputDevices=null;deviceLabelTriggerStatus=_types__WEBPACK_IMPORTED_MODULE_1__.ld.UNTRIGGERED;deviceLabelTriggerStatusObservers=[];deviceLabelTriggerObservers=[];activeSpeakerListener=null;activeSpeakerCallbacks=[];activeSpeakers=[];audioVideoCallbacks=[];devicesUpdatedCallbacks=[];meetingEventObserverSet=new Set;getDeviceLabels(){return this.deviceLabels}constructor(logger){this.logger=logger,this.eventDidReceiveRef={eventDidReceive:(name,attributes)=>{this.publishEventDidReceiveUpdate(name,attributes)}}}initializeMeetingManager(){this.meetingSession=null,this.audioVideo=null,this.meetingSessionConfiguration=void 0,this.meetingId=null,this.selectedAudioOutputDevice=null,this.selectedAudioInputDevice=void 0,this.selectedVideoInputDevice=void 0,this.audioInputDevices=[],this.audioOutputDevices=[],this.videoInputDevices=[],this.activeSpeakers=[],this.activeSpeakerListener=null,this.audioVideoObservers={}}async join(meetingSessionConfiguration,options){const{deviceLabels,eventController,enableWebAudio,activeSpeakerPolicy,skipDeviceSelection}=this.parseJoinParams(options);this.meetingSessionConfiguration=meetingSessionConfiguration,this.meetingId=this.meetingSessionConfiguration.meetingId;const deviceController=new amazon_chime_sdk_js__WEBPACK_IMPORTED_MODULE_0__.DefaultDeviceController(this.logger,{enableWebAudio});this.meetingSession=new amazon_chime_sdk_js__WEBPACK_IMPORTED_MODULE_0__.DefaultMeetingSession(meetingSessionConfiguration,this.logger,deviceController,eventController),this.audioVideo=this.meetingSession.audioVideo,eventController?eventController.addObserver(this.eventDidReceiveRef):this.meetingSession.eventController.addObserver(this.eventDidReceiveRef),this.setupAudioVideoObservers(),this.setupDeviceLabelTrigger(deviceLabels),skipDeviceSelection||(this.logger.info("[MeetingManager.join] listing and selecting devices"),await this.listAndSelectDevices(deviceLabels)),this.publishAudioVideo(),this.setupActiveSpeakerDetection(activeSpeakerPolicy),this.meetingStatus=_types__WEBPACK_IMPORTED_MODULE_1__.e0.Loading,this.publishMeetingStatus()}parseJoinParams(options){const deviceLabels=options?.deviceLabels||_types__WEBPACK_IMPORTED_MODULE_1__.ii.AudioAndVideo,eventController=options?.eventController;return{deviceLabels,eventController,enableWebAudio:options?.enableWebAudio||!1,activeSpeakerPolicy:options?.activeSpeakerPolicy||new amazon_chime_sdk_js__WEBPACK_IMPORTED_MODULE_0__.DefaultActiveSpeakerPolicy,skipDeviceSelection:options?.skipDeviceSelection||!1}}async start(){this.audioVideo?.start()}async leave(){if(this.audioVideo){this.audioVideo.stopContentShare(),this.audioVideo.stopLocalVideoTile(),this.audioVideo.unbindAudioElement();try{await(this.meetingSession?.deviceController.chooseAudioOutput(null)),await(this.meetingSession?.deviceController.destroy())}catch(error){console.log("MeetingManager failed to clean up media resources on leave")}this.activeSpeakerListener&&this.audioVideo.unsubscribeFromActiveSpeakerDetector(this.activeSpeakerListener),this.audioVideo.stop()}this.initializeMeetingManager(),this.publishAudioVideo(),this.publishActiveSpeaker()}audioVideoDidStart=()=>{console.log("[MeetingManager audioVideoDidStart] Meeting started successfully"),this.meetingStatus=_types__WEBPACK_IMPORTED_MODULE_1__.e0.Succeeded,this.publishMeetingStatus()};audioVideoDidStartConnecting=reconnecting=>{this.meetingStatus!==_types__WEBPACK_IMPORTED_MODULE_1__.e0.Reconnecting&&reconnecting&&(this.meetingStatus=_types__WEBPACK_IMPORTED_MODULE_1__.e0.Reconnecting,this.publishMeetingStatus())};audioVideoDidStop=sessionStatus=>{const sessionStatusCode=sessionStatus.statusCode();switch(sessionStatusCode){case amazon_chime_sdk_js__WEBPACK_IMPORTED_MODULE_0__.MeetingSessionStatusCode.MeetingEnded:console.log(`[MeetingManager audioVideoDidStop] Meeting ended for all: ${sessionStatusCode}`),this.meetingStatus=_types__WEBPACK_IMPORTED_MODULE_1__.e0.Ended;break;case amazon_chime_sdk_js__WEBPACK_IMPORTED_MODULE_0__.MeetingSessionStatusCode.Left:console.log(`[MeetingManager audioVideoDidStop] Left the meeting: ${sessionStatusCode}`),this.meetingStatus=_types__WEBPACK_IMPORTED_MODULE_1__.e0.Left;break;case amazon_chime_sdk_js__WEBPACK_IMPORTED_MODULE_0__.MeetingSessionStatusCode.AudioJoinedFromAnotherDevice:console.log(`[MeetingManager audioVideoDidStop] Meeting joined from another device: ${sessionStatusCode}`),this.meetingStatus=_types__WEBPACK_IMPORTED_MODULE_1__.e0.JoinedFromAnotherDevice;break;default:sessionStatus.isFailure()&&!sessionStatus.isTerminal()?(console.log(`[MeetingManager audioVideoDidStop] Non-Terminal failure occurred: ${sessionStatusCode}`),this.meetingStatus=_types__WEBPACK_IMPORTED_MODULE_1__.e0.Failed):sessionStatus.isTerminal()?(console.log(`[MeetingManager audioVideoDidStop] Terminal failure occurred: ${sessionStatusCode}`),this.meetingStatus=_types__WEBPACK_IMPORTED_MODULE_1__.e0.TerminalFailure):console.log(`[MeetingManager audioVideoDidStop] session stopped with code ${sessionStatusCode}`)}this.publishMeetingStatus(),this.audioVideo?.removeObserver(this.audioVideoObservers),this.leave()};setupAudioVideoObservers(){this.audioVideo&&(this.audioVideoObservers={audioVideoDidStart:this.audioVideoDidStart,audioVideoDidStartConnecting:this.audioVideoDidStartConnecting,audioVideoDidStop:this.audioVideoDidStop},this.audioVideo.addObserver(this.audioVideoObservers))}async updateDeviceLists(){this.audioInputDevices=await(this.audioVideo?.listAudioInputDevices())||[],this.videoInputDevices=await(this.audioVideo?.listVideoInputDevices())||[],this.audioOutputDevices=await(this.audioVideo?.listAudioOutputDevices())||[]}setupDeviceLabelTrigger(deviceLabels=_types__WEBPACK_IMPORTED_MODULE_1__.ii.AudioAndVideo){let callback;if(this.deviceLabels=deviceLabels,"function"==typeof deviceLabels)callback=deviceLabels;else if(deviceLabels===_types__WEBPACK_IMPORTED_MODULE_1__.ii.None)callback=noOpDeviceLabelHook;else{const constraints={};switch(deviceLabels){case _types__WEBPACK_IMPORTED_MODULE_1__.ii.Audio:constraints.audio=!0;break;case _types__WEBPACK_IMPORTED_MODULE_1__.ii.Video:constraints.video=!0;break;case _types__WEBPACK_IMPORTED_MODULE_1__.ii.AudioAndVideo:constraints.audio=!0,constraints.video=!0}callback=async()=>{this.deviceLabelTriggerStatus=_types__WEBPACK_IMPORTED_MODULE_1__.ld.IN_PROGRESS,this.publishDeviceLabelTriggerStatus();try{const hasVideoInput=(await navigator.mediaDevices.enumerateDevices()).some((value=>"videoinput"===value.kind)),stream=await navigator.mediaDevices.getUserMedia({audio:constraints.audio,video:constraints.video&&hasVideoInput});return this.deviceLabelTriggerStatus=_types__WEBPACK_IMPORTED_MODULE_1__.ld.GRANTED,this.publishDeviceLabelTriggerStatus(),stream}catch(error){throw console.error("MeetingManager failed to get device permissions"),this.deviceLabelTriggerStatus=_types__WEBPACK_IMPORTED_MODULE_1__.ld.DENIED,this.publishDeviceLabelTriggerStatus(),error}}}this.audioVideo?.setDeviceLabelTrigger(callback)}setupActiveSpeakerDetection(activeSpeakerPolicy){this.publishActiveSpeaker(),this.activeSpeakerListener=activeSpeakers=>{this.activeSpeakers=activeSpeakers,this.activeSpeakerCallbacks.forEach((cb=>cb(activeSpeakers)))},this.audioVideo?.subscribeToActiveSpeakerDetector(activeSpeakerPolicy||new amazon_chime_sdk_js__WEBPACK_IMPORTED_MODULE_0__.DefaultActiveSpeakerPolicy,this.activeSpeakerListener)}async listAndSelectDevices(deviceLabels=_types__WEBPACK_IMPORTED_MODULE_1__.ii.AudioAndVideo){if(await this.updateDeviceLists(),"function"==typeof deviceLabels)return;let isAudioDeviceRequested=!1,isVideoDeviceRequested=!1;switch(deviceLabels){case _types__WEBPACK_IMPORTED_MODULE_1__.ii.None:break;case _types__WEBPACK_IMPORTED_MODULE_1__.ii.Audio:isAudioDeviceRequested=!0;break;case _types__WEBPACK_IMPORTED_MODULE_1__.ii.Video:isVideoDeviceRequested=!0;break;case _types__WEBPACK_IMPORTED_MODULE_1__.ii.AudioAndVideo:isAudioDeviceRequested=!0,isVideoDeviceRequested=!0}if(isAudioDeviceRequested&&!this.selectedAudioInputDevice&&this.audioInputDevices&&this.audioInputDevices.length){this.selectedAudioInputDevice=this.audioInputDevices[0].deviceId;try{await(this.audioVideo?.startAudioInput(this.audioInputDevices[0].deviceId))}catch(error){console.error("MeetingManager failed to select audio input device on join",error)}this.publishSelectedAudioInputDevice()}if(isAudioDeviceRequested&&!this.selectedAudioOutputDevice&&this.audioOutputDevices&&this.audioOutputDevices.length){if(this.selectedAudioOutputDevice=this.audioOutputDevices[0].deviceId,(new amazon_chime_sdk_js__WEBPACK_IMPORTED_MODULE_0__.DefaultBrowserBehavior).supportsSetSinkId())try{await(this.audioVideo?.chooseAudioOutput(this.audioOutputDevices[0].deviceId))}catch(error){console.error("MeetingManager failed to select audio output device on join",error)}this.publishSelectedAudioOutputDevice()}isVideoDeviceRequested&&!this.selectedVideoInputDevice&&this.videoInputDevices&&this.videoInputDevices.length&&(this.selectedVideoInputDevice=this.videoInputDevices[0].deviceId,this.publishSelectedVideoInputDevice())}startAudioInputDevice=async device=>{try{await(this.audioVideo?.startAudioInput(device)),this.selectedAudioInputDevice=device,this.publishSelectedAudioInputDevice()}catch(error){const newError=new Error("MeetingManager failed to select audio input device.");throw error instanceof Error&&(newError.name=error.name,newError.message+=" "+error.message),console.error(newError),newError}};startAudioOutputDevice=async deviceId=>{try{await(this.audioVideo?.chooseAudioOutput(deviceId)),this.selectedAudioOutputDevice=deviceId,this.publishSelectedAudioOutputDevice()}catch(error){throw console.error("MeetingManager failed to select audio output device",error),new Error("MeetingManager failed to select audio output device")}};startVideoInputDevice=async device=>{try{await(this.audioVideo?.startVideoInput(device)),this.selectedVideoInputDevice=device,this.publishSelectedVideoInputDevice()}catch(error){const newError=new Error("MeetingManager failed to select video input device.");throw error instanceof Error&&(newError.name=error.name,newError.message+=" "+error.message),console.error(newError),newError}};stopVideoInputDevice=async()=>{try{await(this.audioVideo?.stopVideoInput()),this.selectedVideoInputDevice=void 0,this.publishSelectedVideoInputDevice()}catch(error){throw console.error("MeetingManager failed to unselect video input device",error),new Error("MeetingManager failed to unselect video input device")}};selectVideoInputDevice=device=>{this.selectedVideoInputDevice=device,this.publishSelectedVideoInputDevice()};invokeDeviceProvider=deviceLabels=>{this.setupDeviceLabelTrigger(deviceLabels),this.publishDeviceLabelTrigger()};subscribeToAudioVideo=callback=>{this.audioVideoCallbacks.push(callback)};unsubscribeFromAudioVideo=callbackToRemove=>{this.audioVideoCallbacks=this.audioVideoCallbacks.filter((callback=>callback!==callbackToRemove))};publishAudioVideo=()=>{this.audioVideoCallbacks.forEach((callback=>{callback(this.audioVideo)}))};subscribeToActiveSpeaker=callback=>{this.activeSpeakerCallbacks.push(callback),callback(this.activeSpeakers)};unsubscribeFromActiveSpeaker=callbackToRemove=>{this.activeSpeakerCallbacks=this.activeSpeakerCallbacks.filter((callback=>callback!==callbackToRemove))};publishActiveSpeaker=()=>{this.activeSpeakerCallbacks.forEach((callback=>{callback(this.activeSpeakers)}))};subscribeToSelectedVideoInputDevice=callback=>{this.selectedVideoInputDeviceObservers.push(callback)};unsubscribeFromSelectedVideoInputDevice=callbackToRemove=>{this.selectedVideoInputDeviceObservers=this.selectedVideoInputDeviceObservers.filter((callback=>callback!==callbackToRemove))};publishSelectedVideoInputDevice=()=>{for(const observer of this.selectedVideoInputDeviceObservers)observer(this.selectedVideoInputDevice)};subscribeToSelectedAudioInputDevice=callback=>{this.selectedAudioInputDeviceObservers.push(callback)};unsubscribeFromSelectedAudioInputDevice=callbackToRemove=>{this.selectedAudioInputDeviceObservers=this.selectedAudioInputDeviceObservers.filter((callback=>callback!==callbackToRemove))};publishSelectedAudioInputDevice=()=>{for(const observer of this.selectedAudioInputDeviceObservers)observer(this.selectedAudioInputDevice)};subscribeToSelectedAudioOutputDevice=callback=>{this.selectedAudioOutputDeviceObservers.push(callback)};unsubscribeFromSelectedAudioOutputDevice=callbackToRemove=>{this.selectedAudioOutputDeviceObservers=this.selectedAudioOutputDeviceObservers.filter((callback=>callback!==callbackToRemove))};publishSelectedAudioOutputDevice=()=>{for(const observer of this.selectedAudioOutputDeviceObservers)observer(this.selectedAudioOutputDevice)};subscribeToMeetingStatus=callback=>{this.meetingStatusObservers.push(callback),callback(this.meetingStatus)};unsubscribeFromMeetingStatus=callbackToRemove=>{this.meetingStatusObservers=this.meetingStatusObservers.filter((callback=>callback!==callbackToRemove))};publishMeetingStatus=()=>{this.meetingStatusObservers.forEach((callback=>{callback(this.meetingStatus)}))};subscribeToDeviceLabelTrigger=callback=>{this.deviceLabelTriggerObservers.push(callback)};unsubscribeFromDeviceLabelTrigger=callbackToRemove=>{this.deviceLabelTriggerObservers=this.deviceLabelTriggerObservers.filter((callback=>callback!==callbackToRemove))};publishDeviceLabelTrigger=()=>{for(const callback of this.deviceLabelTriggerObservers)callback()};subscribeToDeviceLabelTriggerStatus=callback=>{this.deviceLabelTriggerStatusObservers.push(callback)};unsubscribeFromDeviceLabelTriggerStatus=callbackToRemove=>{this.deviceLabelTriggerStatusObservers=this.deviceLabelTriggerStatusObservers.filter((callback=>callback!==callbackToRemove))};publishDeviceLabelTriggerStatus=()=>{for(const observer of this.deviceLabelTriggerStatusObservers)observer(this.deviceLabelTriggerStatus)};subscribeToEventDidReceive=callback=>{this.meetingEventObserverSet.add(callback)};unsubscribeFromEventDidReceive=callbackToRemove=>{this.meetingEventObserverSet.delete(callbackToRemove)};publishEventDidReceiveUpdate=(name,attributes)=>{this.meetingEventObserverSet.forEach((callback=>callback(name,attributes)))}}},"./src/providers/MeetingProvider/index.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Fj:()=>MeetingProvider,GY:()=>useMeetingManager});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_AudioVideoProvider__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/providers/AudioVideoProvider/index.tsx"),_ContentShareProvider__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/providers/ContentShareProvider/index.tsx"),_DevicesProvider__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/providers/DevicesProvider/index.tsx"),_FeaturedVideoTileProvider__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/providers/FeaturedVideoTileProvider/index.tsx"),_LocalAudioOutputProvider__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./src/providers/LocalAudioOutputProvider/index.tsx"),_LocalVideoProvider__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./src/providers/LocalVideoProvider/index.tsx"),_LoggerProvider__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./src/providers/LoggerProvider/index.tsx"),_MeetingEventProvider__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./src/providers/MeetingEventProvider/index.tsx"),_RemoteVideoTileProvider__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./src/providers/RemoteVideoTileProvider/index.tsx"),_RosterProvider__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__("./src/providers/RosterProvider/index.tsx"),_MeetingManager__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__("./src/providers/MeetingProvider/MeetingManager.ts"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__("./node_modules/react/jsx-runtime.js");const MeetingContext=(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null),MeetingProvider=({onDeviceReplacement,meetingManager:meetingManagerProp,children})=>{const logger=(0,_LoggerProvider__WEBPACK_IMPORTED_MODULE_7__.Ul)(),[meetingManager]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)((()=>meetingManagerProp||new _MeetingManager__WEBPACK_IMPORTED_MODULE_11__.A(logger)));return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_12__.jsx)(MeetingContext.Provider,{value:meetingManager,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_12__.jsx)(_MeetingEventProvider__WEBPACK_IMPORTED_MODULE_8__.Fh,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_12__.jsx)(_AudioVideoProvider__WEBPACK_IMPORTED_MODULE_1__.tk,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_12__.jsx)(_DevicesProvider__WEBPACK_IMPORTED_MODULE_3__.vZ,{onDeviceReplacement,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_12__.jsx)(_RosterProvider__WEBPACK_IMPORTED_MODULE_10__.Z,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_12__.jsx)(_RemoteVideoTileProvider__WEBPACK_IMPORTED_MODULE_9__.B,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_12__.jsx)(_LocalVideoProvider__WEBPACK_IMPORTED_MODULE_6__.w,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_12__.jsx)(_LocalAudioOutputProvider__WEBPACK_IMPORTED_MODULE_5__.Q,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_12__.jsx)(_ContentShareProvider__WEBPACK_IMPORTED_MODULE_2__.mM,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_12__.jsx)(_FeaturedVideoTileProvider__WEBPACK_IMPORTED_MODULE_4__.L,{children})})})})})})})})})})};MeetingProvider.displayName="MeetingProvider";const useMeetingManager=()=>{const meetingManager=(0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(MeetingContext);if(!meetingManager)throw new Error("useMeetingManager must be used within MeetingProvider");return meetingManager};try{MeetingProvider.displayName="MeetingProvider",MeetingProvider.__docgenInfo={description:"",displayName:"MeetingProvider",props:{onDeviceReplacement:{defaultValue:null,description:"",name:"onDeviceReplacement",required:!1,type:{name:"((nextDevice: string, currentDevice: AudioInputDevice) => Promise<AudioInputDevice>) | undefined"}},meetingManager:{defaultValue:null,description:"Pass a `MeetingManager` instance if you want to share this instance\nacross multiple different `MeetingProvider`s. This approach has limitations.\nCheck `meetingManager` prop documentation for more information.",name:"meetingManager",required:!1,type:{name:"MeetingManager | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/providers/MeetingProvider/index.tsx#MeetingProvider"]={docgenInfo:MeetingProvider.__docgenInfo,name:"MeetingProvider",path:"src/providers/MeetingProvider/index.tsx#MeetingProvider"})}catch(__react_docgen_typescript_loader_error){}},"./src/providers/RemoteVideoTileProvider/index.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{B:()=>RemoteVideoTileProvider,C:()=>useRemoteVideoTileState});var react=__webpack_require__("./node_modules/react/index.js"),AudioVideoProvider=__webpack_require__("./src/providers/AudioVideoProvider/index.tsx");let VideoTileActionType=function(VideoTileActionType){return VideoTileActionType[VideoTileActionType.UPDATE=0]="UPDATE",VideoTileActionType[VideoTileActionType.REMOVE=1]="REMOVE",VideoTileActionType[VideoTileActionType.RESET=2]="RESET",VideoTileActionType}({});const initialState={tiles:[],tileIdToAttendeeId:{},attendeeIdToTileId:{},size:0},removeProperty=(obj,property)=>{const newState=Object.assign({},obj);return delete newState[property],newState};function reducer(state,{type,payload}){const{tiles,tileIdToAttendeeId,attendeeIdToTileId,size}=state;switch(type){case VideoTileActionType.UPDATE:{const{tileId,attendeeId=""}=payload,tileStr=tileId.toString();if(tileIdToAttendeeId[tileStr])return state;return{tiles:[...tiles,tileId],tileIdToAttendeeId:{...tileIdToAttendeeId,[tileStr]:attendeeId},attendeeIdToTileId:{...attendeeIdToTileId,[attendeeId]:tileId},size:size+1}}case VideoTileActionType.REMOVE:{const{tileId}=payload,attendeeId=tileIdToAttendeeId[tileId],tileStr=tileId.toString();if(!attendeeId)return state;return{tiles:tiles.filter((id=>tileId!==id)),tileIdToAttendeeId:removeProperty(tileIdToAttendeeId,tileStr),attendeeIdToTileId:removeProperty(attendeeIdToTileId,attendeeId),size:size-1}}case VideoTileActionType.RESET:return initialState;default:throw new Error("Incorrect type in VideoProvider")}}var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const Context=(0,react.createContext)(null),RemoteVideoTileProvider=({children})=>{const audioVideo=(0,AudioVideoProvider.n3)(),[state,dispatch]=(0,react.useReducer)(reducer,initialState);return(0,react.useEffect)((()=>{if(!audioVideo)return;const observer={videoTileDidUpdate:tileState=>{if(tileState?.boundAttendeeId&&tileState?.tileId&&!tileState.isContent&&!tileState.localTile){const{tileId,boundAttendeeId}=tileState;dispatch({type:VideoTileActionType.UPDATE,payload:{tileId,attendeeId:boundAttendeeId}})}},videoTileWasRemoved:tileId=>{dispatch({type:VideoTileActionType.REMOVE,payload:{tileId}})}};return audioVideo.addObserver(observer),()=>audioVideo.removeObserver(observer)}),[audioVideo]),(0,react.useEffect)((()=>{if(audioVideo)return()=>dispatch({type:VideoTileActionType.RESET})}),[audioVideo]),(0,jsx_runtime.jsx)(Context.Provider,{value:state,children})};RemoteVideoTileProvider.displayName="RemoteVideoTileProvider";const useRemoteVideoTileState=()=>{const state=(0,react.useContext)(Context);if(!state)throw new Error("useRemoteVideoTileState must be used within a RemoteVideoTileProvider");return state};try{RemoteVideoTileProvider.displayName="RemoteVideoTileProvider",RemoteVideoTileProvider.__docgenInfo={description:"",displayName:"RemoteVideoTileProvider",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/providers/RemoteVideoTileProvider/index.tsx#RemoteVideoTileProvider"]={docgenInfo:RemoteVideoTileProvider.__docgenInfo,name:"RemoteVideoTileProvider",path:"src/providers/RemoteVideoTileProvider/index.tsx#RemoteVideoTileProvider"})}catch(__react_docgen_typescript_loader_error){}},"./src/providers/RosterProvider/index.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>useRosterState,Z:()=>RosterProvider});var amazon_chime_sdk_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/amazon-chime-sdk-js/build/index.js"),react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/index.js"),_AudioVideoProvider__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/providers/AudioVideoProvider/index.tsx"),_MeetingProvider__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/providers/MeetingProvider/index.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/react/jsx-runtime.js");const RosterContext=react__WEBPACK_IMPORTED_MODULE_1__.createContext(null),RosterProvider=({children})=>{const meetingManager=(0,_MeetingProvider__WEBPACK_IMPORTED_MODULE_3__.GY)(),audioVideo=(0,_AudioVideoProvider__WEBPACK_IMPORTED_MODULE_2__.n3)(),rosterRef=(0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({}),[roster,setRoster]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});(0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)((()=>{if(!audioVideo)return;const rosterUpdateCallback=async(chimeAttendeeId,present,externalUserId)=>{if(!present)return delete rosterRef.current[chimeAttendeeId],void setRoster((currentRoster=>{const{[chimeAttendeeId]:_,...rest}=currentRoster;return{...rest}}));const attendeeId=new amazon_chime_sdk_js__WEBPACK_IMPORTED_MODULE_0__.DefaultModality(chimeAttendeeId).base();if(attendeeId!==chimeAttendeeId)return;if(rosterRef.current[chimeAttendeeId])return;let attendee={chimeAttendeeId};if(externalUserId&&(attendee.externalUserId=externalUserId),rosterRef.current[attendeeId]=attendee,setRoster((oldRoster=>({...oldRoster,[attendeeId]:attendee}))),meetingManager.getAttendee){const externalData=await meetingManager.getAttendee(attendeeId,externalUserId);if(!rosterRef.current[attendeeId])return;attendee={...attendee,...externalData},setRoster((oldRoster=>({...oldRoster,[attendeeId]:attendee})))}};return audioVideo.realtimeSubscribeToAttendeeIdPresence(rosterUpdateCallback),()=>{setRoster({}),rosterRef.current={},audioVideo.realtimeUnsubscribeToAttendeeIdPresence(rosterUpdateCallback)}}),[audioVideo]);const value=(0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)((()=>({roster})),[roster]);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(RosterContext.Provider,{value,children})};function useRosterState(){const state=(0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(RosterContext);if(!state)throw new Error("userRosterState must be used within RosterProvider");return state}RosterProvider.displayName="RosterProvider";try{RosterProvider.displayName="RosterProvider",RosterProvider.__docgenInfo={description:"",displayName:"RosterProvider",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/providers/RosterProvider/index.tsx#RosterProvider"]={docgenInfo:RosterProvider.__docgenInfo,name:"RosterProvider",path:"src/providers/RosterProvider/index.tsx#RosterProvider"})}catch(__react_docgen_typescript_loader_error){}},"./src/types/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{e0:()=>MeetingStatus,ii:()=>DeviceLabels,ld:()=>DeviceLabelTriggerStatus});let MeetingStatus=function(MeetingStatus){return MeetingStatus[MeetingStatus.Loading=0]="Loading",MeetingStatus[MeetingStatus.Succeeded=1]="Succeeded",MeetingStatus[MeetingStatus.Failed=2]="Failed",MeetingStatus[MeetingStatus.Ended=3]="Ended",MeetingStatus[MeetingStatus.JoinedFromAnotherDevice=4]="JoinedFromAnotherDevice",MeetingStatus[MeetingStatus.Left=5]="Left",MeetingStatus[MeetingStatus.TerminalFailure=6]="TerminalFailure",MeetingStatus[MeetingStatus.Reconnecting=7]="Reconnecting",MeetingStatus}({}),DeviceLabelTriggerStatus=function(DeviceLabelTriggerStatus){return DeviceLabelTriggerStatus.UNTRIGGERED="UNTRIGGERED",DeviceLabelTriggerStatus.IN_PROGRESS="IN_PROGRESS",DeviceLabelTriggerStatus.GRANTED="GRANTED",DeviceLabelTriggerStatus.DENIED="DENIED",DeviceLabelTriggerStatus}({}),DeviceLabels=function(DeviceLabels){return DeviceLabels[DeviceLabels.None=1]="None",DeviceLabels[DeviceLabels.Audio=2]="Audio",DeviceLabels[DeviceLabels.Video=3]="Video",DeviceLabels[DeviceLabels.AudioAndVideo=4]="AudioAndVideo",DeviceLabels}({})}}]);