{"version":3,"file":"components-ui-Chat-InfiniteList-InfiniteList-mdx.e5bc63dd.iframe.bundle.js","mappings":";;;;;;;AAqBA;AAGA;;;;;;;;;;;;AAYA;AACA;;;;;;;;;AASA;;;;;;;ACHA;AA3BA;;;AA8BA;;;;;;;;;;AACA;;;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA","sources":["webpack://amazon-chime-sdk-component-library-react/./src/components/ui/Chat/InfiniteList/Styled.tsx","webpack://amazon-chime-sdk-component-library-react/./src/components/ui/Flex/Styled.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport styled, { keyframes } from 'styled-components';\n\nimport { defaultStyledConfig } from '../../../../utils/style';\nimport { baseSpacing, baseStyles } from '../../Base';\nimport { InfiniteListProps } from './';\n\n// Create the keyframes\nconst rotate = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\ninterface StyledInfiniteListProps extends InfiniteListProps {}\n\nexport const StyledInfiniteList = styled.ul.withConfig(\n  defaultStyledConfig\n)<StyledInfiniteListProps>`\n  background-color: ${(props) => props.theme.chatBubble.container.bgd};\n  overflow-y: scroll;\n  display: flex;\n  flex-direction: column;\n  list-style: none;\n  padding: 0;\n\n  /* disable scrolling while fetching */\n  &.ch-not-scrollable {\n    overflow-y: hidden;\n  }\n\n  ${baseSpacing}\n  ${baseStyles}\n\n  .ch-spinner {\n    margin: 0 auto;\n  }\n\n  .ch-spinner svg {\n    width: 2rem;\n    height: 2rem;\n    animation: ${rotate} 2s linear infinite;\n    display: block;\n  }\n`;\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport styled, { css } from 'styled-components';\n\nimport { defaultStyledConfig } from '../../../utils/style';\nimport { baseSpacing, baseStyles } from '../Base';\nimport { FlexProps } from './';\n\nexport const fillSpace = css`\n  display: flex;\n  width: 100%;\n  height: 100%;\n`;\n\nexport const fillSpaceCentered = css`\n  ${fillSpace};\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const equalColumns = css`\n  display: flex;\n  flex-direction: row;\n  height: 100%;\n  align-items: stretch;\n\n  > * {\n    flex-grow: 1;\n    flex-basis: 50%;\n  }\n`;\n\nexport const stack = css`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  > * {\n    width: 100%;\n  }\n`;\n\nconst layoutMap = {\n  'fill-space': fillSpace,\n  'fill-space-centered': fillSpaceCentered,\n  'equal-columns': equalColumns,\n  stack,\n};\n\nexport const StyledFlex = styled.div.withConfig(defaultStyledConfig)<FlexProps>`\n  align-items: ${(props) => props.alignItems};\n  display: ${(props) => (props.container ? 'flex' : 'block')};\n  flex: ${(props) => props.flex || ''};\n  flex-basis: ${(props) => props.flexBasis};\n  flex-direction: ${(props) => props.flexDirection};\n  flex-grow: ${(props) => props.flexGrow || ''};\n  flex-shrink: ${(props) => props.flexShrink};\n  flex-wrap: ${(props) => props.flexWrap};\n  justify-content: ${(props) => props.justifyContent};\n\n  // layout variants\n  ${(props) => !!props.layout && layoutMap[props.layout]}\n\n  ${baseSpacing}\n  ${baseStyles}\n`;\n"],"names":[],"sourceRoot":""}